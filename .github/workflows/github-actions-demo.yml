name: Versioning and Tagging Workflow

on:
  push:
    branches:
      - master

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23'

      - name: Read current version
        id: get_version
        run: |
          VERSION=$(grep -oP '(?<=var Version = ")[^"]*' version.go)
          echo "Current Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Increment version
        run: |
          VERSION="${{ env.version }}"
          IFS='.' read -r major minor patch <<< "$VERSION"
          patch=$((patch + 1)) # Increment patch version
          NEW_VERSION="$major.$minor.$patch"
          echo "New Version: $NEW_VERSION"
          # Update version.go with the new version
          sed -i "s/^var Version = \".*\"/var Version = \"$NEW_VERSION\"/" version.go
          echo "Updated version.go with version $NEW_VERSION"

      - name: Commit version changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add version.go
          git commit -m "Bump version to $NEW_VERSION"
          git push origin master # Push changes back to the repository

      - name: Run Go application
        run: go run .
        continue-on-error: false  # If this fails, the job stops

      - name: Create and push a new tag
        if: success()  # Only run this step if the previous steps were successful
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub Actions' token
        run: |
          VERSION="${{ env.version }}"
          NEW_VERSION="${{ steps.get_version.outputs.NEW_VERSION }}"
          # Create a new tag with the new version
          git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
          git push origin "v$NEW_VERSION"
